NEXT:
	Map Generation
		Create jsons for map rotations when converting images
		Have doors overlap (room can fit if it doesn't change any existing non empty tiles?)
			or, have doors slightly out in images (more work)
		Don't just place prefabs, but randomly connect some rooms
		Once prefabs are placed, check for possible doors that are close and connect them.
		Do a BFS to find farthest spots and try connecting them to something to make dungeon less linear
		Have it so rooms of the same type can't be placed next to eachother (have int grid with prefab index that's filled when placing)

	Event System
		When an actor takes an action an additional event is created that contains information about the animation, as well as a corresponding log.
	
	Log System Improvements
		Possibly fixed by above, but logs should update as they happen, or possibly just immediately. Should be divided by player turn? Or just have old logs faded

Later:
	AI System
			Create wandering system
		Cleanup
			Every so often check if anything references an entity and destroy it if not (look through AI components for instance) (mark for cleanup upon death?)

	Tie input thresholds to framerate (move outside game.cpp?)

	Layer system
		either have priority queue (seems costly) or vector of vectors. push render job (create something for) to the correct layer
		fixes doors being above, and also allows z depth for bug textures (appear in front of some walls and behind others)

Ideas:
	Have damage system and damage component
	Resolve damage after each action
	Go through each entity with a damage component
	call an AddDamage function to add damage to entity and provide the attacker